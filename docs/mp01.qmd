---
title: "Mini-Project#01: Fiscal Characteristics of Major US Public Transit Systems"
editor: visual
---

This project is inspired from [CityNerd Youtube channel](https://www.youtube.com/@CityNerd) and focuses on farebox recovery - the percentage of a transit system's revenue that comes from fares instead of taxes. The data for this analysis comes from the [National Transit Database](https://www.transit.dot.gov/ntd)(NTD). This mini-project analyzes farebox revenues, total trips, vehicle miles traveled and operating expenses for public transit systems in the U.S. in 2022.

Key data sources:

-   [2022 Fare Revenue Table](https://www.transit.dot.gov/ntd/data-product/2022-annual-database-fare-revenues)

-   [Latest Monthly Ridership Tables](https://www.transit.dot.gov/ntd/data-product/monthly-module-adjusted-data-release)

-   [2022 Operating Expenses Reports](https://www.transit.dot.gov/ntd/data-product/2022-operating-expenses)

## Part 1. Data Downloading & Cleaning

The first step is to install the [tidyverse](https://github.com/tidyverse) package, as it provides useful data manipulation tools such as:

-   `dplyr` for data manipulation functions (e.g.`mutate()`, `select()`, `group_by()`)

-   `ggplot2` for data visualization (e.g. bar charts, line charts, scatter plots)

-   `readr` for reading and writing data (e.g.`read_csv()`, `write_csv()`)

### a) Fare Revenue Data

-   This dataset contains information on the total fare revenues for transit agencies. All files in downloading steps are taken directly from the official website. After the `FARES` data is cleaned, only important columns are selected and data is filtered by the rows where `Expense Type` is `Funds Earned During Period`.

```{r, echo=TRUE, message=FALSE}
if(!require("tidyverse")) install.packages("tidyverse")

# Let's start with Fare Revenue
library(tidyverse)
if(!file.exists("2022_fare_revenue.xlsx")){
    # This should work _in theory_ but in practice it's still a bit finicky
    # If it doesn't work for you, download this file 'by hand' in your
    # browser and save it as "2022_fare_revenue.xlsx" in your project
    # directory.
    download.file("http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx", 
                  destfile="2022_fare_revenue.xlsx", 
                  quiet=FALSE, 
                  method="wget")
}
FARES <- readxl::read_xlsx("2022_fare_revenue.xlsx") |>
    select(-`State/Parent NTD ID`, 
           -`Reporter Type`,
           -`Reporting Module`,
           -`TOS`,
           -`Passenger Paid Fares`,
           -`Organization Paid Fares`) |>
    filter(`Expense Type` == "Funds Earned During Period") |>
    select(-`Expense Type`) |>
    group_by(`NTD ID`,       # Sum over different `TOS` for the same `Mode`
             `Agency Name`,  # These are direct operated and sub-contracted 
             `Mode`) |>      # of the same transit modality
                             # Not a big effect in most munis (significant DO
                             # tends to get rid of sub-contractors), but we'll sum
                             # to unify different passenger experiences
    summarize(`Total Fares` = sum(`Total Fares`)) |>
    ungroup()
```

### b) Expenses Data

-   This step involves getting the 2022 operating expenses data. The expenses are grouped by `NTD ID`, `Agency`, `Total` and `Mode` to calculate total operating costs for each agency and transportation mode.

```{r, echo=TRUE, message=FALSE}
if(!file.exists("2022_expenses.csv")){
    # This should work _in theory_ but in practice it's still a bit finicky
    # If it doesn't work for you, download this file 'by hand' in your
    # browser and save it as "2022_expenses.csv" in your project
    # directory.
    download.file("https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true", 
                  destfile="2022_expenses.csv", 
                  quiet=FALSE, 
                  method="wget")
}
EXPENSES <- readr::read_csv("2022_expenses.csv") |>
    select(`NTD ID`, 
           `Agency`,
           `Total`, 
           `Mode`) |>
    mutate(`NTD ID` = as.integer(`NTD ID`)) |>
    rename(Expenses = Total) |>
    group_by(`NTD ID`, `Mode`) |>
    summarize(Expenses = sum(Expenses)) |>
    ungroup()
```

### c) Merging Financial Data

`FINANCIALS = FARES + EXPENSES`

To combine the fare revenue and expenses by `NTD ID` and `Mode` â€“ the `inner_join()` function is used.

```{r, echo=TRUE, message=FALSE}
FINANCIALS <- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))
```

### d) Ridership Data

In this part, the monthly ridership data is downloaded and necessary columns are kept, especially we are interested in this data:

-   UPT - Unlinked Passenger Trips

-   VRM - Vehicle Revenue Miles

```{r, echo=TRUE, message=FALSE}
if(!file.exists("ridership.xlsx")){
  # This should work _in theory_ but in practice it's still a bit finicky
  # If it doesn't work for you, download this file 'by hand' in your
  # browser and save it as "ridership.xlsx" in your project
  # directory.
  download.file("https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx", 
                destfile="ridership.xlsx", 
                quiet=FALSE, 
                method="wget")
}
TRIPS <- readxl::read_xlsx("ridership.xlsx", sheet="UPT") |>
  filter(`Mode/Type of Service Status` == "Active") |>
  select(-`Legacy NTD ID`, 
         -`Reporter Type`, 
         -`Mode/Type of Service Status`, 
         -`UACE CD`, 
         -`TOS`) |>
  rename(metro_area = `UZA Name`) |> #task1
  pivot_longer(-c(`NTD ID`:`3 Mode`, metro_area), 
               names_to="month", 
               values_to="UPT") |>
  drop_na() |>
  mutate(month=my(month)) # Parse _m_onth _y_ear date specs

MILES <- readxl::read_xlsx("ridership.xlsx", sheet="VRM") |>
  filter(`Mode/Type of Service Status` == "Active") |>
  select(-`Legacy NTD ID`, 
         -`Reporter Type`, 
         -`Mode/Type of Service Status`, 
         -`UACE CD`, 
         -`TOS`) |>
  pivot_longer(-c(`NTD ID`:`3 Mode`), 
               names_to="month", 
               values_to="VRM") |>
  drop_na() |>
  rename(metro_area =`UZA Name`) |> #task1
  group_by(`NTD ID`, `Agency`, metro_area, 
           `Mode`, `3 Mode`, month) |>
  summarize(VRM = sum(VRM)) |>
  ungroup() |>
  mutate(month=my(month)) # Parse _m_onth _y_ear date specs
```

### e) Merging Ridership Data

The `inner_join()` function is used again for `TRIPS` and `MILES` to get them together into `USAGE` dataset.

```{r, echo=TRUE, message=FALSE}
USAGE <- inner_join(TRIPS, MILES) |>
  mutate(`NTD ID` = as.integer(`NTD ID`))
if(!require("DT")) install.packages("DT")
library(DT)
```

### f) Glimpse of the Main Dataset and Improving `Mode` column

-   `sample_n(USAGE, 1000)` selects a random sample of 1000 records from the `USAGE` dataset;

-   `mutate` helps to convert the `month` column to a character format, ensuring it's one format for further analysis;

-   `DT::datatable()` gives a web-like interactive table for a sampled dataset for filtering, sorting etc., ensure that `DT` library is installed, if not use `install.packages("DT")` function from the previous step;

```{r, echo=TRUE, message=FALSE}
sample_n(USAGE, 1000) |> 
  mutate(month=as.character(month)) |> 
  DT::datatable()
```

Next, the `mutate` function is used to recode `Mode` column for better clarity for transportation systems. And, `case_when()` function replace abbreviations\
AR -\> Alaska Railroad etc. The `distinct` function checks correct transformation for unique modes.

```{r, echo=TRUE, message=FALSE}
USAGE <- USAGE |>
  mutate(Mode=case_when(
    Mode == "AR" ~ "Alaska Railroad", 
    Mode == "CB" ~ "Commuter Bus",
    Mode == "CC" ~ "Cable Car",
    Mode == "CR" ~ "Commuter Rail",
    Mode == "DR" ~ "Demand Response",
    Mode == "FB" ~ "Ferryboat",
    Mode == "HR" ~ "Heavy Rail",
    Mode == "IP" ~ "Inclined Plane",
    Mode == "LR" ~ "Light Rail",
    Mode == "MB" ~ "Bus",
    Mode == "MG" ~ "Monorail/Automated Guideway",
    Mode == "PB" ~ "Publico",
    Mode == "RB" ~ "Bus Rapid Transit",
    Mode == "SR" ~ "Streercar Rail",
    Mode == "TB" ~ "Trolleybus",
    Mode == "TR" ~ "Aerial Tramway",
    Mode == "VP" ~ "Vanpool",
    Mode == "YR" ~ "Hybrid Rail",
    TRUE ~ "Unknown"
))
distinct(USAGE, Mode)
```

## Part 2. Data Analysis

### [Question 1.]{.underline} What transit agency had the most total VRM in our data set?

To get this answer, the total vehicle miles traveled by agency are aggregated (ensure to remove empty rows, and get only one agency with the highest VRM):

```{r, echo=TRUE, message=FALSE}
most_vrm_agency <- USAGE |>
  group_by(Agency) |>
  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |>
  arrange(desc(total_VRM)) |>
  slice(1) #top result
most_vrm_agency
```

### [Question 2.]{.underline} What transit mode had the most total VRM in our data set?

This question is pretty simple. We need to update the code above to a 'Mode' instead of 'Agency'

```{r, echo=TRUE}
most_vrm_mode <- USAGE |>
  group_by(Mode) |>
  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |>
  arrange(desc(total_VRM)) |>
  slice(1) #top result
most_vrm_mode
```

### [Question 3.]{.underline} How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?

The code below calculates MTA NYC Transit trips taken by Heavy Rail mode for the month of May 2024. The `summarize()` function is used to create a new variable `total_trips`, sum sums the values in the `UPT` column and `na.rm` ignores missing values.

```{r, echo=TRUE}
nyc_subway_may2024 <- USAGE |>
  filter(Agency == "MTA New York City Transit", Mode == "Heavy Rail", month == "2024-05-01") |>
  summarize(total_trips = sum(UPT, na.rm = TRUE))
nyc_subway_may2024
```

### [Question 4.]{.underline} How much did NYC subway ridership fall between April 2019 and April 2020?

The code filters only "MTA New York City Transit" for the dates mentioned, then sums the UPT for each month. After that, the percentage drop in ridership is calculated to reflect the impact of the COVID-19 on public transportation usage during the pandemic.

```{r, echo=TRUE}
nyc_subway_april_ridership <- USAGE |>
  filter(Agency == "MTA New York City Transit", 
         Mode == "Heavy Rail", 
         month %in% c("2019-04-01", "2020-04-01")) |>
  group_by(month) |>
  summarize(total_trips = sum(UPT, na.rm = TRUE)) #ridership fall

ridership_fall <- nyc_subway_april_ridership |> # % fall 
  summarize(fall = 100* (total_trips[month == "2020-04-01"] - total_trips[month == "2019-04-01"]) / total_trips[month == "2019-04-01"])
ridership_fall
```

## More interesting transit facts

### [1.]{.underline} Which transit agency had the most trips in a single month?

Let's find out the transit agency with the most trips in a single month by grouping the data by agency and month, summing the total trips, sorting in descending order and getting the top result.

```{r, echo=TRUE}
most_trip_single_month <- USAGE |>
  group_by(Agency, month) |>
  summarize(total_trips = sum(UPT,na.rm = TRUE), .groups = "drop") |>
  arrange(desc(total_trips)) |>
  slice(1)
most_trip_single_month
```

### [2.]{.underline} Which mode of transit had the highest trip length in 2024?

This code filters `2024` by using `grepl` function for `month` column. Then, groups `Mode` and calculates the average trip length by diving totals of VRM and UPT.

```{r, echo=TRUE}
longest_avg_trip_2024 <-USAGE |>
  filter(grepl("2024", month)) |>
  group_by(Mode) |>
  summarize(avg_trip_length = sum(VRM, na.rm = TRUE) / sum(UPT, na.rm = TRUE)) |>
  arrange(desc(avg_trip_length)) |>
  slice(1)
longest_avg_trip_2024
```

### [3.]{.underline} Which transit agency had the largest vehicle fleet(VRM) in 2024? 

This code provides the agency with the most distance(VRM) with its fleet in 2024.

```{r, echo=TRUE}
largest_fleet_2024 <- USAGE |>
  filter(grepl("2024", month)) |>
  group_by(Agency) |>
  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |>
  arrange(desc(total_VRM)) |>
  slice(1)
largest_fleet_2024
```

## Part 3. Table Summarization

This code is responsible for creating an annual summary of public transit usage and financial data for 2022 - `USAGE_2022_ANNUAL`, steps

1\) Filtering and summarizing transit data for 2022.

2\) Updating Financial data mode labels.

3\) Join the `USAGE_AND_FINANCIALS` and making sure that modes aren't abbreviated.

```{r, echo=TRUE}
#Task 5 table summarization
library(dplyr)
library(lubridate) #year function

USAGE_2022_ANNUAL <- USAGE |>
  filter(year(month) == 2022) |>
  group_by(`NTD ID`, Agency, metro_area, Mode) |>
  summarize(
    UPT = sum(UPT, na.rm = TRUE),
    VRM = sum(VRM, na.rm = TRUE),
    .groups = "drop"
  )
USAGE_2022_ANNUAL

FINANCIALS_mode_updated <- FINANCIALS %>%
  mutate(Mode =case_when(
    Mode == "AR" ~ "Alaska Railroad", 
    Mode == "CB" ~ "Commuter Bus",
    Mode == "CC" ~ "Cable Car",
    Mode == "CR" ~ "Commuter Rail",
    Mode == "DR" ~ "Demand Response",
    Mode == "FB" ~ "Ferryboat",
    Mode == "HR" ~ "Heavy Rail",
    Mode == "IP" ~ "Inclined Plane",
    Mode == "LR" ~ "Light Rail",
    Mode == "MB" ~ "Bus",
    Mode == "MG" ~ "Monorail/Automated Guideway",
    Mode == "PB" ~ "Publico",
    Mode == "RB" ~ "Bus Rapid Transit",
    Mode == "SR" ~ "Streercar Rail",
    Mode == "TB" ~ "Trolleybus",
    Mode == "TR" ~ "Aerial Tramway",
    Mode == "VP" ~ "Vanpool",
    Mode == "YR" ~ "Hybrid Rail",
    TRUE ~ "Unknown"
  ))
FINANCIALS_mode_updated

USAGE_AND_FINANCIALS <- left_join(USAGE_2022_ANNUAL, 
                                  FINANCIALS_mode_updated, 
                                  join_by(`NTD ID`, Mode)) |>
  drop_na()
```

## Part 4. Farebox Recovery Among Major Systems

### 1. Which transit system (agency and mode) had the most UPT in 2022?

The metric of Unlinked Passengers Trips or UPT provides insight into how many time passengers boarded a transit vehicle. The high UPT equals to more frequent trips. To filter the busiest system, we set 400,000 UPT at least in 2022 and sorted by the highest total.

```{r, echo=TRUE}
most_upt_2022 <- USAGE_AND_FINANCIALS |>
  filter(UPT >= 400000) |>
  arrange(desc(UPT)) |>
  slice(1)
most_upt_2022
```

**Result:** It's no surprise that **MTA New York City Transit - Heavy Rail** leads with **1.79 billion** UPT. The immense number of people rely on it every day, both New Yorkers and tourists.

### 2. Which transit system (agency and mode) had the highest *farebox recovery*, defined as the highest ratio of Total Fares to Expenses?

The farebox recovery ratio measures the percentage of operating expenses covered by fare revenue. In this research we will take only a glimpse how financially self-sustaining a transit system is.

```{r, echo=TRUE}
highest_farebox_recovery <- USAGE_AND_FINANCIALS |>
  filter(UPT >= 400000) |>
  mutate(farebox_recovery = `Total Fares` / Expenses) |>
  arrange(desc(farebox_recovery)) |>
  slice(1)
highest_farebox_recovery
```

**Result: Port Imperial Ferry (New York-New Jersey area)** is on the top of the chart with **66.3% farebox recovery ratio**. This higher ratio means that it's less reliant on subsidies from local or federal governments.

### 3. Which transit system (agency and mode) has the lowest expenses per UPT?

With **Expenses per UPT** we measure how much it costs to transport a single pasenger for a trip. Lower expenses per trip indicate better services at reduced cost.

```{r, echo=TRUE}
lower_expenses_per_upt <- USAGE_AND_FINANCIALS |>
  filter(UPT >= 400000) |>
  mutate(expenses_per_upt = Expenses / UPT) |>
  arrange(expenses_per_upt) |>
  slice(1)
lower_expenses_per_upt
```

**Result**: The **North Carolina Department of Transportation's Bus system** in **Raleigh** leads this chart with the lowest expenses per trip.

### 4. Which transit system (agency and mode) has the highest total fares per UPT?

Total fares per UPT provide an indicator how much revenue the system is generating from each passenger trip. Higher fares can be due to the distances or premium services.

```{r, echo=TRUE}
highest_fares_per_upt <- USAGE_AND_FINANCIALS |>
  filter(UPT >= 400000) |>
  mutate(fares_per_upt = `Total Fares` / UPT) |>
  arrange(desc(fares_per_upt)) |>
  slice(1)
highest_fares_per_upt
```

**Result**: **Hampton Jitney(Commuter Bus)** in the **New York City** are had the highest total **\$41.29 per UPT** and is the combination of long-distance and premium services for people who want to spend the vacation in Hamptons.

### 5. Which transit system (agency and mode) has the lowest expenses per VRM?

```{r, echo=TRUE}
lowest_expenses_per_vrm <-USAGE_AND_FINANCIALS |>
  filter(UPT >= 400000) |>
  mutate(expenses_per_vrm = Expenses / VRM) |>
  arrange(expenses_per_vrm) |>
  slice(1)
lowest_expenses_per_vrm
```

### 6. Which transit system (agency and mode) has the highest total fares per VRM?

Now we are interested how much revenue is being generated for each mile traveled and the higher fare revenue is the more expensive/premium services are or efficient fare collection.

```{r, echo=TRUE}
highest_fares_per_vrm <- USAGE_AND_FINANCIALS |>
  filter(UPT >= 400000) |>
  mutate(fares_per_vrm = `Total Fares` / VRM) |>
  arrange(desc(fares_per_vrm)) |>
  slice(1)
highest_fares_per_vrm
```

**Result**: **Jacksonville Transportation Authority's Ferry** **service** generates **\$157.71 per VTM**. Meaning, ferry service in that location, has significantly higher fares compared to bus or rail, due to specific travel needs.\

\
This mini-project provides valuable insights into the operational, financial efficiency and sustainability of various U.S. transit systems; and gives a great glimpse into the data how well certain transit agencies manage the cost efficiency and revenue generation from fares.
