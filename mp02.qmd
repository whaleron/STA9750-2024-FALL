---
title: "Mini-Project #02: The Business of Show Business"
editor: visual
execute:
  enabled: false
  cache: true
---

In this project, we will analyze the Hollywood history and get data-driven ideas for a "new movie" by defining best genres, actors, directors of a decade, all the time and assign special weighted score that will help us to identify the secret of a successful sauce to make the catchy and appealing movie for the nowadays audience. Let's begin!

The key data source that will be used is the [Internet Movie Database (IMDb) for non-commercial use](https://datasets.imdbws.com/).

## Before we start

### 1) Import libraries

The first step before you start doing anything on your project is to make sure that you have all your packages installed. However, don't be worried if you miss any, you can add them anywhere in the code, but for readability and clean code writing you should build that habit of importing everything when you start. While we are familiar already with the most of the packages I will add only two comments for new ones.

Note: The code will be collapsed for better navigation.

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Import Libraries"
library(readr)
library(dplyr)
library(stringr)
library(ggplot2)
library(scales)
library(tidyr)
library(knitr) #improves readability of outputs
library(kableExtra) #addition to knitr, styling tables in R Markdown documents 
#install.packages("kableExtra") #if it didn't import, do install command
```

### 2) Import the dataset

It might take some time to download it and several times I caught myself on thought that R Studio was not working, but it was. Just give it a time, some of the datasets have more than 3M rows!

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Import IMDb Data"
#| cache: true

get_imdb_file <- function(fname){
    BASE_URL <- "https://datasets.imdbws.com/"
    fname_ext <- paste0(fname, ".tsv.gz")
    if(!file.exists(fname_ext)){
        FILE_URL <- paste0(BASE_URL, fname_ext)
        download.file(FILE_URL, 
                      destfile = fname_ext)
    }
    as.data.frame(readr::read_tsv(fname_ext, lazy=FALSE))
}

NAME_BASICS      <- get_imdb_file("name.basics")
TITLE_BASICS     <- get_imdb_file("title.basics")
TITLE_EPISODES   <- get_imdb_file("title.episode")
TITLE_RATINGS    <- get_imdb_file("title.ratings")
TITLE_CREW       <- get_imdb_file("title.crew")
TITLE_PRINCIPALS <- get_imdb_file("title.principals")
```

After this step we will start our EDA(explanatory data analysis)

![Source: geeksforgeeks.org](images/Steps-for-Performing-Exploratory-Data-Analysis.png)

### 3) **Data Sub-Sampling**

We will sample our data to smaller chunks for this analysis and will use "knownForTites" names assigned by IMDb and Titles that have more than 100 ratings as we don't need anything lower for finding the best samples to follow for our movie idea. As well we will do a semi-join to return only the values that have a match and doesn't add collumns.

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Data Sub-Sampling"
#| cache: true

NAME_BASICS <- NAME_BASICS |> 
    filter(str_count(knownForTitles, ",") > 1)
TITLE_RATINGS |>
    ggplot(aes(x=numVotes)) + 
    geom_histogram(bins=30) +
    xlab("Number of IMDB Ratings") + 
    ylab("Number of Titles") + 
    ggtitle("Majority of IMDB Titles Have Less than 100 Ratings") + 
    theme_bw() + 
    scale_x_log10(label=scales::comma) + 
    scale_y_continuous(label=scales::comma)

TITLE_RATINGS |>
    pull(numVotes) |>
    quantile()
TITLE_RATINGS <- TITLE_RATINGS |>
    filter(numVotes >= 100)
#semi-join
TITLE_BASICS <- TITLE_BASICS |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))

TITLE_CREW <- TITLE_CREW |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))

TITLE_EPISODES_1 <- TITLE_EPISODES |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))
TITLE_EPISODES_2 <- TITLE_EPISODES |>
    semi_join(TITLE_RATINGS, 
              join_by(parentTconst == tconst))

TITLE_EPISODES <- bind_rows(TITLE_EPISODES_1,
                            TITLE_EPISODES_2) |>
    distinct()

TITLE_PRINCIPALS <- TITLE_PRINCIPALS |>
    semi_join(TITLE_RATINGS, join_by(tconst == tconst))


rm(TITLE_EPISODES_1)
rm(TITLE_EPISODES_2)
```

### 4) Data Cleaning

In this step, we will correct the column types of the `TITLE` tables using a combination of `mutate` and the coercion functions `as.numeric` and `as.logical`.

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "NAME_BASICS Example"
#| cache: true
NAME_BASICS <- NAME_BASICS |>
    mutate(birthYear = as.numeric(birthYear),
           deathYear = as.numeric(deathYear))
```

Before we will change all types it's useful to check what is your data with `glimpse` function.

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Glimpse Example"
#| cache: true

glimpse(NAME_BASICS)
glimpse(TITLE_BASICS)
glimpse(TITLE_EPISODES)
glimpse(TITLE_RATINGS)
glimpse(TITLE_CREW)
glimpse(TITLE_PRINCIPLES)
```

Another good function is `separate_longer_delim` that helps to break view into multiple rows, here's the example:

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Separate_longer_delim function"
#| cache: true

NAME_BASICS |> separate_longer_delim(knownForTitles, ",") |> slice_head(n=10)
```

Here's a small schema that shows all connections between the tables.

![](images/Screenshot%202024-10-13%20at%203.54.01%20PM.png){fig-align="center"}

#### Task 1. Correct all TITLE tables

```{r, echo=TRUE, message=FALSE}
#| cache: true

TITLE_BASICS <- TITLE_BASICS |>
    mutate(startYear = as.numeric(startYear),
           endYear = as.numeric(endYear),
           isAdult = as.logical(as.numeric(isAdult))
           )
TITLE_EPISODES <- TITLE_EPISODES |>
    mutate(seasonNumber = as.numeric(seasonNumber),
           episodeNumbers = as.numeric(episodeNumber))
TITLE_RATINGS <- TITLE_RATINGS |>
    mutate(averageRating = as.numeric(averageRating),
           numVotes = as.numeric(numVotes))
TITLE_CREW <- TITLE_CREW |>
    mutate(directors = as.character(directors),
           writers = as.character(writers))
TITLE_PRINCIPALS <- TITLE_PRINCIPALS |>
    mutate(ordering = as.numeric(ordering),
           category = as.character(category),
           job = as.character(job),
           characters =as.character(characters))
```

After we wrangled and cleaned our dataset we can proceed to simple data manipulations and answer some questions!\

#### Task 2. Bunch of dataset questions

#### 1) How many movies are in our data set? How many TV series? How many TV episodes?

| Questions                            | Answers |
|--------------------------------------|---------|
| How many movies are in our data set? | 132091  |
| How many TV series?                  | 29942   |
| How many TV episodes?                | 156442  |

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 1 Code"
TITLE_BASICS |>
  group_by(titleType) |>
  summarise(count = n())
```

#### 2) Who is the oldest living person in our data set?

Answer: **Traudl Lessing** was born in 1625.

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 2 Code"
oldest_person <- NAME_BASICS |>
  filter(is.na(deathYear)) |>
  filter(birthYear == min(birthYear, na.rm = TRUE)) |>
  select(primaryName,birthYear)
print(oldest_person)
```

#### 3) There is one TV Episode in this data set with a perfect 10/10 rating and 200,000 IMDb ratings. What is it? What series does it belong to?

Answer: **Ozymandias**

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 3 Code"
best_episode <- TITLE_RATINGS |>
  filter(averageRating == 10, numVotes >= 200000) |>
  inner_join(TITLE_BASICS, by = "tconst") |>
  select(primaryTitle, titleType)
print(best_episode)
```

#### 4) What four projects is the actor Mark Hamill most known for?

Answer:

**1. Star Wars: Episode IV - A New Hope\
2. Star Wars: Episode VIII - The Last Jedi\
3. Star Wars: Episode V - The Empire Strikes Back\
4. Star Wars: Episode VI - Return of the Jedi**

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 4 Code"
hamill_titles <- NAME_BASICS |>
  filter(primaryName == "Mark Hamill") |>
  separate_rows(knownForTitles, sep = ",") |>
  inner_join(TITLE_BASICS, by = c("knownForTitles" = "tconst")) |>
  select (primaryTitle)
print(hamill_titles)
print(best_episode)
```

#### 5) What TV series, with more than 12 episodes, has the highest average rating?

Answer: **Breaking Bad** with the average rating 9.5.

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 5 Code"
top_series <- TITLE_EPISODES |>
  count(parentTconst) |>
  filter(n>12) |>
  inner_join(TITLE_RATINGS, by = c("parentTconst" = "tconst")) |>
  arrange(desc(averageRating)) |>
  top_n(1) |>
  inner_join(TITLE_BASICS, by = c("parentTconst" ="tconst")) |>
  select(primaryTitle, averageRating)
print(top_series)
```

#### 6) Is it true that episodes from later seasons of Happy Days have lower average ratings than the early seasons?

Answer: It's **not true**, all episodes from later seasons have **7.4 rating.**

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 6 Code"
happy_days <- TITLE_BASICS |>
  filter(primaryTitle == "Happy Days") |>
  inner_join(TITLE_EPISODES, by = c("tconst" = "parentTconst")) |>
  inner_join(TITLE_RATINGS, by = "tconst") |>
  group_by(seasonNumber) |>
  summarise(avg_rating = mean(averageRating, na.rm = TRUE)) |>
  arrange (seasonNumber)
print(happy_days)
```

#### Task 3. Custom Success Metric

Some time ago I was doing Netflix RFP where was calculating something close to success metric, that was called **Weighted Popularity Score(WPS)**. It's mission was to define a balance between amount of votes and score to give a fair value that indicated quality, a large number of ratings and broad awareness in the public.

[![Click on the image to check the whole presentation.](images/clipboard-4066319679.png){fig-align="center"}](https://docs.google.com/presentation/d/19DgvE69bhsV6MdJ79rCskthTuYRCTIf3/edit#slide=id.g2d247c6671a_3_10)

This type of score is pretty similar to calculations that search engine uses to rank the websites in the top but there definitely many more variables to account for. Here's a great article about [Reddit's Hot Ranking](https://medium.com/hacking-and-gonzo/how-reddit-ranking-algorithms-work-ef111e33d0d9) that uses very close logic to this!

First time, when I used this formula it felt "I have no idea what I'm doing". Giving a credit to the article from [Hackernoon](https://hackernoon.com/from-reddits-hot-ranking-algorithm-to-my-satisfying-blend-or-top-ranked-and-new-by2h35tm) and the quote when I read how's Reddit algo works to make sure that my formula is legit. as I know as well only basic algebra.

![](images/clipboard-3963764336.png){fig-align="center"}

To cut the long story short, here's its meaning:

The formula combines IMDB ratings and the logarithm of the number of IMDB votes. The logarithmic scaling minimizes the impact of unevenly high or low vote counts while highlighting quality, popularity, and relevance of the rating to votes. By adding 1 to the formula, we avoid taking the logarithm of zero. Let's begin coding!

```{r, echo=TRUE, message=FALSE}
TITLE_RATINGS <- TITLE_RATINGS |>
  mutate(weighted_popularity_score = averageRating * log(numVotes + 1))
```

#### 1) Choose the top 5-10 movies on your metric and confirm that they were indeed box office successes.

Answer:

| Primary Title                                         | WPS      | Average Rating | Number of Votes |
|-------------------|------------------|------------------|------------------|
| 1\. Breaking Bad                                      | 138.8069 | 9.5            | 2216074         |
| 2\. The Shawshank Redemption                          | 138.5429 | 9.3            | 2949309         |
| 3\. Game of Thrones                                   | 134.9721 | 9.2            | 2352239         |
| 4\. The Dark Knight                                   | 134.0153 | 9.0            | 2930213         |
| 5\. The Godfather                                     | 133.7331 | 9.2            | 2055854         |
| 6\. The Lord of the Rings: The Return of the King     | 130.6624 | 9.0            | 2018856         |
| 7\. Pulp Fiction                                      | 130.2338 | 8.9            | 2264831         |
| 8\. Inception                                         | 129.9884 | 8.8            | 2601001         |
| 9\. The Lord of the Rings: The Fellowship of the Ring | 129.3403 | 8.9            | 2048498         |
| 10\. Fight Club                                       | 129.2115 | 8.8            | 2381226         |

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 1 Code"
top_movies <- TITLE_RATINGS |>
  arrange(desc(weighted_popularity_score)) |>
  head(10) |>
  inner_join(TITLE_BASICS, by = "tconst") |>
  select(primaryTitle, weighted_popularity_score, averageRating, numVotes)
print(top_movies)
```

#### 2) Choose 3-5 movies with large numbers of IMDb votes that score poorly on your success metric and confirm that they are indeed of low quality.

Answer:

| Primary Title          | WPS      | Average Rating | Number of Votes |
|------------------------|----------|----------------|-----------------|
| 1\. Robyn Hood         | 8.764990 | 1.0            | 6405            |
| 2\. 321 Action         | 9.231123 | 1.0            | 10209           |
| 3\. The Gringo Papi    | 9.467536 | 1.1            | 5468            |
| 4\. Decrepit Crescendo | 9.913832 | 1.2            | 3871            |
| 5\. What Must Be Done  | 9.995746 | 1.1            | 8839            |

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 2 Code"
low_movies <- TITLE_RATINGS |>
  filter(numVotes >quantile(TITLE_RATINGS$numVotes, 0.9)) |>
  arrange(weighted_popularity_score) |>
  head(5) |>
  inner_join (TITLE_BASICS, by = "tconst") |>
  select(primaryTitle, weighted_popularity_score, averageRating, numVotes)
print(low_movies)
```

Conclusion for 1 & 2, the `weighted_popularity_score` (WPS) valid compared with the data and show proper calculation to both highest or lowest amount of votes with scores.

#### 3) Choose a prestige actor or director and confirm that they have many projects with high scores on your success metric.

One of my the most favorite movies is "Inception" so let's take Cillian Murphy to check the WPS.

Answer:

| Primary Title       | WPS       | Average Rating | Number of Votes |
|---------------------|-----------|----------------|-----------------|
| 1\. The Dark Knight | 134.01527 | 9.0            | 2930213         |
| 2\. Inception       | 129.98838 | 8.8            | 2601001         |
| 3\. Peaky Blinders  | 118.12761 | 8.8            | 675758          |
| 4\. Batman Begins   | 117.17419 | 8.2            | 1606446         |
| 5\. Oppenheimer     | 112.84997 | 8.3            | 803217          |

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 3 Code"

#finding cillian murphy id in the dataset
cillian_murphy <- NAME_BASICS |>
  filter(primaryName == "Cillian Murphy") |>
  select(nconst, primaryName)
print(cillian_murphy)

successful_actor <- TITLE_PRINCIPALS |>
  filter(nconst == "nm0614165") |>
  inner_join(TITLE_RATINGS, by = "tconst") |>
  arrange(desc(weighted_popularity_score)) |>
  inner_join(TITLE_BASICS, by = "tconst") |>
  select(primaryTitle, weighted_popularity_score, averageRating, numVotes)
print(successful_actor)
```

#### 4) Perform at least one other form of ‘spot check’ validation.

The best way to cut unpopular vs popular movies is to verify with minimum and maximum functions. And do a quick check where are the most points are.

Min: 4.62 Max: 138.8

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 4 Code"
TITLE_RATINGS <- TITLE_RATINGS |>
  mutate(weighted_popularity_score = averageRating * log(numVotes + 1))

min_score <- min(TITLE_RATINGS$weighted_popularity_score, na.rm = TRUE)
max_score <- max(TITLE_RATINGS$weighted_popularity_score, na.rm = TRUE)

TITLE_RATINGS |>
  ggplot(aes(x = weighted_popularity_score)) +
  geom_histogram(bins = 50) +
  xlab("Weighted Popularity Score") +
  ylab("Number of Titles") +
  ggtitle("Distribution of Weighted Popularity Scores") +
  theme_minimal()
```

#### 5) Come up with a numerical threshold for a project to be a ‘success’; that is, determine a value v such that movies above v are all “solid” or better.

The 90th percentile corresponds to a 59.87, so we will set a threshold value not lower than 59 to capture the truly successful movies.

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 5 - Code"
quantiles <- quantile(TITLE_RATINGS$weighted_popularity_score, probs = seq(0, 1, 0.1), na.rm = TRUE)
print(quantiles)

success_threshold <- 59

```

#### Task 4. Trends in Success Over Time

Alright, now we can check data more with a threshold set to find successful plots that attract the audience.

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Task 4 - Data Prep"
TITLE_RATINGS <- TITLE_RATINGS |>
  mutate(weighted_popularity_score = averageRating * log(numVotes + 1))
titles_data <- TITLE_BASICS |>
  inner_join(TITLE_RATINGS, by = "tconst")
movies_data <- titles_data |>
  filter(titleType == "movie")
movies_data <- movies_data |>
  mutate(startYear = as.numeric(startYear)) |>
  filter(!is.na(startYear) & startYear >= 1900 & startYear <= 2024)
movies_data <- movies_data |>
  separate_rows(genres, sep = ",")
movies_data <- movies_data |>
  filter(genres != "\\N")
success_threshold <- 59
movies_data <- movies_data |>
  mutate(is_success = ifelse(weighted_popularity_score >= success_threshold, TRUE, FALSE))
#creating a decade
movies_data <- movies_data |>
  mutate(decade = floor(startYear / 10) * 10)

# a) Count successes by genre and decade
genre_decade_successes <- movies_data |>
  filter(is_success) |>
  group_by(decade, genres) |>
  summarise(success_count = n(), .groups = 'drop')
# b) Total number of movies by genre and decade
genre_decade_totals <- movies_data |>
  group_by(decade, genres) |>
  summarise(total_count = n(), .groups = 'drop')
# c) Calculate success rate
genre_decade_stats <- genre_decade_successes |>
  inner_join(genre_decade_totals, by = c("decade", "genres")) |>
  mutate(success_rate = success_count / total_count)
```

#### 1) What was the genre with the most “successes” in each decade?

Previously, we assigned the threshold and further analyses will be based on this "success metric".

Spoiler: People love **Drama!**

| Decade | Genre | Success Count |
|--------|-------|---------------|
| 1910   | Drama | 3             |
| 1920   | Drama | 51            |
| 1930   | Drama | 133           |
| 1940   | Drama | 237           |
| 1950   | Drama | 341           |
| 1960   | Drama | 424           |
| 1970   | Drama | 469           |
| 1980   | Drama | 574           |
| 1990   | Drama | 1093          |
| 2000   | Drama | 1808          |
| 2010   | Drama | 2446          |
| 2020   | Drama | 975           |

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 1 - Code"
top_genres_per_decade <- genre_decade_successes |>
  group_by(decade) |>
  top_n(1, wt = success_count) |>
  arrange(decade)
print(top_genres_per_decade)
```

Plotting over time with new `gganimate` knowledge.

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 1 - Moving plot"
if (!require(gganimate)) install.packages("gganimate")
if (!require(gifski)) install.packages("gifski")
if (!require(av)) install.packages("av")
if (!require(scales)) install.packages("scales")

# Load libraries
library(ggplot2)
library(gganimate)
library(gifski)
library(av)
library(scales)
library(dplyr)
library(tidyr)
#I was doing this code separately in R, so you will see some variables we did before 
movies_data <- movies_data |>
  mutate(is_success = ifelse(weighted_popularity_score >= success_threshold, TRUE, FALSE))

genre_decade_successes <- movies_data |>
  filter(is_success) |>
  group_by(decade, genres) |>
  summarise(success_count = n(), .groups = 'drop')

top_genres_overall <- genre_decade_successes |>
  group_by(genres) |>
  summarise(total_successes = sum(success_count), .groups = 'drop') |>
  arrange(desc(total_successes)) |>
  head(10) |>
  pull(genres)

plot_data <- genre_decade_successes |>
  filter(genres %in% top_genres_overall)

# Create the animated plot
animation <- ggplot(plot_data, aes(x = reorder(genres, success_count), y = success_count, fill = genres)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(title = "Number of Successful Movies by Genre in {closest_state}",
       x = "Genre",
       y = "Number of Successful Movies") +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(size = 16, face = "bold")) +
  transition_states(decade, transition_length = 2, state_length = 1) +
  ease_aes('cubic-in-out')

# Render
animate(animation, renderer = gifski_renderer(), width = 800, height = 600)
anim_save("genre_successes.gif", animation = last_animation())
```

#### 2) What genre consistently has the most “successes”? What genre used to reliably produced “successes” and has fallen out of favor?

Answer:

| Genres      | Decades with success | Total successes |
|-------------|----------------------|-----------------|
| Drama       | 12                   | 8554            |
| Action      | 12                   | 2767            |
| Crime       | 12                   | 2639            |
| Romance     | 12                   | 2419            |
| Adventure   | 12                   | 1826            |
| History     | 12                   | 687             |
| War         | 12                   | 446             |
| Comedy      | 11                   | 4379            |
| Thriller    | 11                   | 1809            |
| Biography   | 11                   | 1146            |
| Mystery     | 11                   | 1143            |
| Horror      | 11                   | 1012            |
| Documentary | 11                   | 883             |
| Fantasy     | 11                   | 762             |
| Animation   | 11                   | 632             |

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 2 - Code"
genre_decade_presence <- genre_decade_successes |>
  group_by(genres) |>
  summarise(decades_with_success = n_distinct(decade), .groups = 'drop')

total_successes_per_genre <- genre_decade_successes |>
  group_by(genres) |>
  summarise(total_successes = sum(success_count), .groups = 'drop')

genre_consistency <- genre_decade_presence |>
  inner_join(total_successes_per_genre, by = "genres") |>
  arrange(desc(decades_with_success), desc(total_successes))

print(n = 15, genre_consistency)
```

#### 3) What genre has produced the most “successes” since 2010? Does it have the highest success rate or does it only have a large number of successes because there are many productions in that genre?

Answer:

**What genre has produced the most "successes" since 2010?**

Answer: Drama has produced the most "successes" since 2010, with 3,421 successful movies.

**Does it have the highest success rate or does it only have a large number of successes because there are many productions in that genre?**

Answer: Drama does not have the highest success rate. Its large number of successes is primarily due to the high number of productions in that genre. The success rate for Drama is 12.0%, which is lower than genres like Biography (22.4%) and Adventure (20.3%).

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 3 - Code"
movies_since_2010 <- movies_data |>
  filter(startYear >= 2010)

successes_since_2010 <- movies_since_2010 |>
  filter(is_success) |>
  group_by(genres) |>
  summarise(success_count = n(), .groups = 'drop')

total_since_2010 <- movies_since_2010 |>
  group_by(genres) |>
  summarise(total_count = n(), .groups = 'drop')

genre_success_rate_since_2010 <- successes_since_2010 |>
  inner_join(total_since_2010, by = "genres") |>
  mutate(success_rate = success_count / total_count) |>
  arrange(desc(success_count))

print(genre_success_rate_since_2010)
```

Here's a plot:

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 3 - Code"
library(ggplot2)
library(scales)

ggplot(genre_success_rate_since_2010, aes(x = reorder(genres, success_count), y = success_count)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_line(aes(y = success_rate * max(success_count), group = 1), color = "red", size = 1) +
  geom_point(aes(y = success_rate * max(success_count)), color = "black", size = 2) +
  scale_y_continuous(
    name = "Success Count",
    sec.axis = sec_axis(~ . / max(genre_success_rate_since_2010$success_count), name = "Success Rate", labels = percent_format(accuracy = 1))
  ) +
  labs(
    title = "Success Count and Success Rate by Genre Since 2010",
    x = "Genre"
  ) +
  coord_flip() +
  theme_minimal()
```

#### 4) What genre has become more popular in recent years?

Answer: The **News** genre has become **x10 times** more popular in recent years, exhibiting the highest growth rate among all genres according to the provided data.

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Question 4 - Code"
genre_decade_totals_all <- movies_data |>
  group_by(decade, genres) |>
  summarise(total_count = n(), .groups = 'drop')

# Total movies per genre from previous decade
genre_growth <- genre_decade_totals_all |>
  arrange(genres, decade) |>
  group_by(genres) |>
  mutate(previous_total = lag(total_count),
         growth = (total_count - previous_total) / previous_total) |>
  ungroup()

# Recent decades from 1990 onwards
recent_genre_growth <- genre_growth |>
  filter(decade >= 1990 & !is.na(growth))

top_growing_genres <- recent_genre_growth |>
  arrange(desc(growth)) |>
  head(10)

print(top_growing_genres)
```

#### **Task 5. Key Personnel**

Let's prapare the data to get at least 2 best actors and 1 director.

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Task 5 - Code"
TITLE_RATINGS <- TITLE_RATINGS |>
  mutate(weighted_popularity_score = averageRating * log(numVotes + 1))

# Merge TITLE_BASICS, TITLE_RATINGS, and TITLE_PRINCIPALS
movies_data <- TITLE_BASICS |>
  inner_join(TITLE_RATINGS, by = "tconst") |>
  inner_join(TITLE_PRINCIPALS, by = "tconst") |>
  filter(category %in% c("actor", "actress", "director"))

movies_data <- movies_data |>
  mutate(startYear = as.numeric(startYear)) |>
  filter(!is.na(startYear) & startYear >= 2010 & titleType == "movie")

# Join with NAME_BASICS to get actor and director names
movies_data <- movies_data |>
  inner_join(NAME_BASICS, by = "nconst") |>
  select(nconst, primaryName, category, tconst, primaryTitle, startYear, genres, weighted_popularity_score)

#FOR ACTORS/ACTRESSES ONLY
# Calculate average success metric for actors and actresses
actor_success <- movies_data |>
  filter(category %in% c("actor", "actress")) |>
  group_by(nconst, primaryName) |>
  summarise(
    average_success = mean(weighted_popularity_score, na.rm = TRUE),
    total_movies = n(),
    .groups = 'drop'
  ) |>
  filter(total_movies >= 3)  # Consider actors with at least 3 movies
#DIRECTORS ONLY
# Filter for directors
director_data <- TITLE_CREW |>
  separate_rows(directors, sep = ",") |>
  rename(nconst = directors) |>
  inner_join(TITLE_BASICS, by = "tconst") |>
  inner_join(TITLE_RATINGS, by = "tconst") |>
  mutate(startYear = as.numeric(startYear)) |>
  filter(!is.na(startYear) & startYear >= 2010 & titleType == "movie") |>
  inner_join(NAME_BASICS, by = "nconst") |>
  select(nconst, primaryName, tconst, primaryTitle, startYear, genres, weighted_popularity_score)
```

We will concentrate on two genres Action and War to get our top actors and directors.

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Task 5 - Code"
# Calculate average success metric for directors
director_success <- director_data |>
  group_by(nconst, primaryName) |>
  summarise(
    average_success = mean(weighted_popularity_score, na.rm = TRUE),
    total_movies = n(),
    .groups = 'drop'
  ) |>
  filter(total_movies >= 2)  # Consider directors with at least 2 movies

#TOP ACTORS
preferred_genres <- c("Action", "War")

# Filter movies in preferred genres
actors_in_genres <- movies_data |>
  filter(category %in% c("actor", "actress")) |>
  separate_rows(genres, sep = ",") |>
  filter(genres %in% preferred_genres)

# Average success for actors in preferred genres
actor_success_genre <- actors_in_genres |>
  group_by(nconst, primaryName) |>
  summarise(
    average_success = mean(weighted_popularity_score, na.rm = TRUE),
    total_movies = n(),
    .groups = 'drop'
  ) |>
  filter(total_movies >= 2)  # At least 2 movies in preferred genres

# Top 5 actors
top_actors <- actor_success_genre |>
  arrange(desc(average_success)) |>
  head(5)

print(top_actors)

#TOP DIRECTOR 
# Filter director movies in preferred genres
directors_in_genres <- director_data |>
  separate_rows(genres, sep = ",") |>
  filter(genres %in% preferred_genres)

# Average success for directors in preferred genres
director_success_genre <- directors_in_genres |>
  group_by(nconst, primaryName) |>
  summarise(
    average_success = mean(weighted_popularity_score, na.rm = TRUE),
    total_movies = n(),
    .groups = 'drop'
  ) |>
  filter(total_movies >= 1)  # At least 1 movie in preferred genres

top_directors <- director_success_genre |>
  arrange(desc(average_success)) |>
  head(3)
print(top_directors)
```

Answer:

| Primary Name      | Average Success | Total Movies |
|-------------------|-----------------|--------------|
| Leonardo DiCaprio | 120             | 2            |
| Timothée Chalamet | 111             | 2            |
| Don Cheadle       | 108             | 10           |
| Robert Downey Jr. | 107             | 15           |
| Mark Ruffalo      | 107             | 12           |

: Top Actors

Answer:

| Primary Name      | Average Success | Total Movies |
|-------------------|-----------------|--------------|
| Christopher Nolan | 114             | 4            |
| Rodney Rothman    | 113             | 1            |
| Bob Persichetti   | 113             | 1            |

: Top Directors

```{r, echo=TRUE, message=FALSE}
#| code-fold: true
#| code-summary: "Bar plot"
library(ggplot2)
library(dplyr)

# Get top 5 actors and top 3 directors
top_actors <- actor_success_genre %>%
  arrange(desc(average_success)) %>%
  head(5)

top_directors <- director_success_genre %>%
  arrange(desc(average_success)) %>%
  head(3)

plot_data <- bind_rows(
  top_actors %>% mutate(Talent = "Actor"),
  top_directors %>% mutate(Talent = "Director")
)

# Highlight selected talents
selected_names <- c("Leonardo DiCaprio", "Robert Downey Jr.", "Christopher Nolan")
plot_data <- plot_data %>%
  mutate(Selected = ifelse(primaryName %in% selected_names, "Selected", "Others"))

# Create the bar chart
ggplot(plot_data, aes(x = reorder(primaryName, average_success), y = average_success, fill = Selected)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(
    title = "Average Success Scores of Top Actors and Directors",
    x = "Talent",
    y = "Average Success Score"
  ) +
  scale_fill_manual(values = c("Selected" = "blue", "Others" = "grey")) +
  theme_minimal()
```

#### Task 6: Finding a Classic Movie to Remake

[Lawrence of Arabia](https://www.imdb.com/title/tt0056172/) is an epic classic that presents a profound and captivating narrative, making it an ideal candidate for a modern remake. IMDb rating of 8.3 and a substantial number of ratings, reflecting its enduring popularity. There has been no remake of this classic action and war film in the past 25 years. Since the original actors and director are deceased, we can proceed with a new cast featuring Leonardo DiCaprio and Robert Downey Jr., directed by Christopher Nolan. To move forward, we need to clarify and secure the legal rights from Columbia Pictures, the current rights holder.

#### **Task 7: Write and Deliver Your Pitch**

**Elevator Pitch:**

We propose a groundbreaking remake of the epic classic "Lawrence of Arabia", a film that holds an impressive IMDb rating of 8.3 with over 275,000 votes, yet has not been remade in over 25 years. This presents a unique opportunity to reintroduce this timeless story to a new generation. Our project perfectly aligns with the high-performing action and war genres, which boast success rates exceeding 20% since 2010.

Christopher Nolan, renowned for his visionary storytelling in films like "Inception" and "Dunkirk", will direct this ambitious remake. Leading the cast, Leonardo DiCaprio will embody the complex character of T.E. Lawrence, bringing depth and nuance to the role. Alongside him, Robert Downey Jr. will add his charisma and talent to a pivotal supporting role, enhancing the film's appeal.

With this exceptional team, we aim to create a cinematic masterpiece that honors the original while captivating modern audiences. Securing the rights from Columbia Pictures will allow us to proceed, and with your approval, we can begin this exciting journey.

![](images/Beige Brown Clean Desolate Desert Photo Album Cover.jpg)

**Classic 90's Style Teaser:**

> From director Christopher Nolan, the visionary mind behind "Inception" and "Dunkirk";
>
> And from actor Leonardo DiCaprio, beloved star of "The Revenant";
>
> And from actor Robert Downey Jr., Hollywood icon of action and war films;
>
> Comes the timeless tale "Lawrence of Arabia".
>
> A story of courage, identity, and destiny.
>
> Coming soon to a theater near you.
