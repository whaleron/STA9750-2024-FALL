[
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Mini-Project#01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "",
    "text": "This project is inspired from CityNerd Youtube channel and focuses on farebox recovery - the percentage of a transit system’s revenue that comes from fares instead of taxes. The data for this analysis comes from the National Transit Database(NTD). This mini-project analyzes farebox revenues, total trips, vehicle miles traveled and operating expenses for public transit systems in the U.S. in 2022.\nKey data sources:"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Valeriia Frolova",
    "section": "",
    "text": "Short Bio\nFor more than 7 years, I’ve been optimizing websites and elevating brands through targeted SEO strategies. To complement my experience with advanced analytical skills, I’m pursuing an MSBA at Baruch College, driven by a passion for data-driven decisions.\n\nYou can view some of my ML projects.\nConnect with me on: X & Linkedin."
  },
  {
    "objectID": "mp01.html#step-1.-data-downloading-cleaning",
    "href": "mp01.html#step-1.-data-downloading-cleaning",
    "title": "Mini-Project#01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Step 1. Data Downloading & Cleaning",
    "text": "Step 1. Data Downloading & Cleaning\nThe first step is to install the tidyverse package, as it provides useful data manipulation tools such as:\n\ndplyr for data manipulation functions (e.g.mutate(), select(), group_by())\nggplot2 for data visualization (e.g. bar charts, line charts, scatter plots)\nreadr for reading and writing data (e.g.read_csv(), write_csv())\n\n\na) Fare Revenue Data\n\nThis dataset contains information on the total fare revenues for transit agencies. All files in downloading steps are taken directly from the official website. After the FARES data is cleaned, only important columns are selected and data is filtered by the rows where Expense Type is Funds Earned During Period.\n\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\n# Let's start with Fare Revenue\nlibrary(tidyverse)\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"2022_fare_revenue.xlsx\" in your project\n    # directory.\n    download.file(\"http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\", \n                  destfile=\"2022_fare_revenue.xlsx\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n    select(-`State/Parent NTD ID`, \n           -`Reporter Type`,\n           -`Reporting Module`,\n           -`TOS`,\n           -`Passenger Paid Fares`,\n           -`Organization Paid Fares`) |&gt;\n    filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n    select(-`Expense Type`) |&gt;\n    group_by(`NTD ID`,       # Sum over different `TOS` for the same `Mode`\n             `Agency Name`,  # These are direct operated and sub-contracted \n             `Mode`) |&gt;      # of the same transit modality\n                             # Not a big effect in most munis (significant DO\n                             # tends to get rid of sub-contractors), but we'll sum\n                             # to unify different passenger experiences\n    summarize(`Total Fares` = sum(`Total Fares`)) |&gt;\n    ungroup()\n\n\n\nb) Expenses Data\n\nThis step involves getting the 2022 operating expenses data. The expenses are grouped by NTD ID, Agency, Total and Mode to calculate total operating costs for each agency and transportation mode.\n\n\nif(!file.exists(\"2022_expenses.csv\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"2022_expenses.csv\" in your project\n    # directory.\n    download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\", \n                  destfile=\"2022_expenses.csv\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n    select(`NTD ID`, \n           `Agency`,\n           `Total`, \n           `Mode`) |&gt;\n    mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n    rename(Expenses = Total) |&gt;\n    group_by(`NTD ID`, `Mode`) |&gt;\n    summarize(Expenses = sum(Expenses)) |&gt;\n    ungroup()\n\n\n\nc) Merging Financial Data\nFINANCIALS = FARES + EXPENSES\nTo combine the fare revenue and expenses by NTD ID and Mode – the inner_join() function is used.\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\n\n\nd) Ridership Data\nIn this part, the monthly ridership data is downloaded and necessary columns are kept, especially we are interested in this data:\n\nUPT - Unlinked Passenger Trips\nVRM - Vehicle Revenue Miles\n\n\nif(!file.exists(\"ridership.xlsx\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"ridership.xlsx\" in your project\n  # directory.\n  download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\", \n                destfile=\"ridership.xlsx\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  rename(metro_area = `UZA Name`) |&gt; #task1\n  pivot_longer(-c(`NTD ID`:`3 Mode`, metro_area), \n               names_to=\"month\", \n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  rename(metro_area =`UZA Name`) |&gt; #task1\n  group_by(`NTD ID`, `Agency`, metro_area, \n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\n\n\ne) Merging Ridership Data\nThe inner_join() function is used again for TRIPS and MILES to get them together into USAGE dataset.\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\n\n\nf) Glimpse on the Main Dataset and Improving Mode column\n\nsample_n(USAGE, 1000) selects a random sample of 1000 records from the USAGE dataset;\nmutate helps to convert the month column to a character format, ensuring it’s one format for further analysis;\nDT::datatable() gives a web-like interactive table for a sampled dataset for filtering, sorting etc., ensure that DT library is installed, if not use install.packages(\"DT\") function from the previous step;\n\n\nsample_n(USAGE, 1000) |&gt; \n  mutate(month=as.character(month)) |&gt; \n  DT::datatable()\n\n\n\n\n\nNext, the mutate function is used to recode Mode column for better clarity for transportation systems. And, case_when() function replace abbreviations\nAR -&gt; Alaska Railroad etc. The distinct function checks correct transformation for unique modes.\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode=case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\", \n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"SR\" ~ \"Streercar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    TRUE ~ \"Unknown\"\n))\ndistinct(USAGE, Mode)\n\n# A tibble: 18 × 1\n   Mode                       \n   &lt;chr&gt;                      \n 1 Demand Response            \n 2 Ferryboat                  \n 3 Bus                        \n 4 Streercar Rail             \n 5 Trolleybus                 \n 6 Vanpool                    \n 7 Commuter Bus               \n 8 Bus Rapid Transit          \n 9 Light Rail                 \n10 Hybrid Rail                \n11 Monorail/Automated Guideway\n12 Commuter Rail              \n13 Alaska Railroad            \n14 Aerial Tramway             \n15 Heavy Rail                 \n16 Inclined Plane             \n17 Publico                    \n18 Cable Car"
  },
  {
    "objectID": "mp01.html#step-2.-data-analysis",
    "href": "mp01.html#step-2.-data-analysis",
    "title": "Mini-Project#01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Step 2. Data Analysis",
    "text": "Step 2. Data Analysis\nQuestion 1. What transit agency had the most total VRM in our data set?\nTo get this answer, the total vehicle miles traveled by agency are aggregated (ensure to remove empty rows, and get only one agency with the highest VRM):\n\nmost_vrm_agency &lt;- USAGE |&gt;\n  group_by(Agency) |&gt;\n  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_VRM)) |&gt;\n  slice(1) #top result\nmost_vrm_agency\n\n# A tibble: 1 × 2\n  Agency                      total_VRM\n  &lt;chr&gt;                           &lt;dbl&gt;\n1 MTA New York City Transit 10832855350\n\n\nQuestion 2. What transit mode had the most total VRM in our data set?\nThis question is pretty simple. We need to update the code above to a ‘Mode’ instead of ‘Agency’\n\nmost_vrm_mode &lt;- USAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_VRM)) |&gt;\n  slice(1) #top result\nmost_vrm_mode\n\n# A tibble: 1 × 2\n  Mode    total_VRM\n  &lt;chr&gt;       &lt;dbl&gt;\n1 Bus   49444494088\n\n\nQuestion 3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\nThe code below calculates MTA NYC Transit trips taken by Heavy Rail mode for the month of May 2024. The summarize() function is used to create a new variable total_trips, sum sums the values in the UPT column and na.rm ignores missing values.\n\nnyc_subway_may2024 &lt;- USAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\", Mode == \"Heavy Rail\", month == \"2024-05-01\") |&gt;\n  summarize(total_trips = sum(UPT, na.rm = TRUE))\nnyc_subway_may2024\n\n# A tibble: 1 × 1\n  total_trips\n        &lt;dbl&gt;\n1   180458819\n\n\nQuestion 4. How much did NYC subway ridership fall between April 2019 and April 2020? The code filters only “MTA New York City Transit” for the dates mentioned, then sums the UPT for each month. After that, the percentage drop in ridership is calculated to reflect the impact of the COVID-19 on public transportation usage during the pandemic.\n\nnyc_subway_april_ridership &lt;- USAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\", \n         Mode == \"Heavy Rail\", \n         month %in% c(\"2019-04-01\", \"2020-04-01\")) |&gt;\n  group_by(month) |&gt;\n  summarize(total_trips = sum(UPT, na.rm = TRUE)) #ridership fall\n\nridership_fall &lt;- nyc_subway_april_ridership |&gt; # % fall \n  summarize(fall = 100* (total_trips[month == \"2020-04-01\"] - total_trips[month == \"2019-04-01\"]) / total_trips[month == \"2019-04-01\"])\nridership_fall\n\n# A tibble: 1 × 1\n   fall\n  &lt;dbl&gt;\n1 -91.3"
  },
  {
    "objectID": "mp01.html#more-interesting-transit-facts",
    "href": "mp01.html#more-interesting-transit-facts",
    "title": "Mini-Project#01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "More interesting transit facts",
    "text": "More interesting transit facts\n1. Which transit agency had the most trips in a single month?\nLet’s find out the transit agency with the most trips in a single month by grouping the data by agency and month, summing the total trips, sorting in descending order and getting the top result.\n\nmost_trip_single_month &lt;- USAGE |&gt;\n  group_by(Agency, month) |&gt;\n  summarize(total_trips = sum(UPT,na.rm = TRUE), .groups = \"drop\") |&gt;\n  arrange(desc(total_trips)) |&gt;\n  slice(1)\nmost_trip_single_month\n\n# A tibble: 1 × 3\n  Agency                    month      total_trips\n  &lt;chr&gt;                     &lt;date&gt;           &lt;dbl&gt;\n1 MTA New York City Transit 2014-10-01   322725962\n\n\n2. Which mode of transit had the highest trip length in 2024?\nThis code filters 2024 by using grepl function for month column. Then, groups Mode and calculates the average trip length by diving totals of VRM and UPT.\n\nlongest_avg_trip_2024 &lt;-USAGE |&gt;\n  filter(grepl(\"2024\", month)) |&gt;\n  group_by(Mode) |&gt;\n  summarize(avg_trip_length = sum(VRM, na.rm = TRUE) / sum(UPT, na.rm = TRUE)) |&gt;\n  arrange(desc(avg_trip_length)) |&gt;\n  slice(1)\nlongest_avg_trip_2024\n\n# A tibble: 1 × 2\n  Mode            avg_trip_length\n  &lt;chr&gt;                     &lt;dbl&gt;\n1 Demand Response            12.8\n\n\n3. Which transit agency had the largest vehicle fleet(VRM) in 2024? This code provides the agency with the most distance(VRM) with its fleet in 2024.\n\nlargest_fleet_2024 &lt;- USAGE |&gt;\n  filter(grepl(\"2024\", month)) |&gt;\n  group_by(Agency) |&gt;\n  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_VRM)) |&gt;\n  slice(1)\nlargest_fleet_2024\n\n# A tibble: 1 × 2\n  Agency                    total_VRM\n  &lt;chr&gt;                         &lt;dbl&gt;\n1 MTA New York City Transit 273222702"
  },
  {
    "objectID": "mp01.html#step-3.-table-summarization",
    "href": "mp01.html#step-3.-table-summarization",
    "title": "Mini-Project#01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Step 3. Table Summarization",
    "text": "Step 3. Table Summarization\n\n#Task 5 table summarization\nlibrary(dplyr)\nlibrary(lubridate) #year function\n\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  filter(year(month) == 2022) |&gt;\n  group_by(`NTD ID`, Agency, metro_area, Mode) |&gt;\n  summarize(\n    UPT = sum(UPT, na.rm = TRUE),\n    VRM = sum(VRM, na.rm = TRUE),\n    .groups = \"drop\"\n  )\nUSAGE_2022_ANNUAL\n\n# A tibble: 1,141 × 6\n   `NTD ID` Agency                                metro_area Mode     UPT    VRM\n      &lt;int&gt; &lt;chr&gt;                                 &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1        1 King County                           Seattle--… Bus   5.40e7 6.16e7\n 2        1 King County                           Seattle--… Dema… 6.63e5 1.29e7\n 3        1 King County                           Seattle--… Ferr… 4.00e5 5.12e4\n 4        1 King County                           Seattle--… Stre… 1.12e6 1.80e5\n 5        1 King County                           Seattle--… Trol… 9.58e6 2.64e6\n 6        1 King County                           Seattle--… Vanp… 7.03e5 4.41e6\n 7        2 Spokane Transit Authority             Spokane, … Bus   6.60e6 6.49e6\n 8        2 Spokane Transit Authority             Spokane, … Dema… 3.10e5 4.04e6\n 9        2 Spokane Transit Authority             Spokane, … Vanp… 9.06e4 9.06e5\n10        3 Pierce County Transportation Benefit… Seattle--… Bus   4.95e6 4.23e6\n# ℹ 1,131 more rows\n\nFINANCIALS_mode_updated &lt;- FINANCIALS %&gt;%\n  mutate(Mode =case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\", \n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"SR\" ~ \"Streercar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    TRUE ~ \"Unknown\"\n  ))\nFINANCIALS_mode_updated\n\n# A tibble: 1,173 × 5\n   `NTD ID` `Agency Name`                           Mode  `Total Fares` Expenses\n      &lt;dbl&gt; &lt;chr&gt;                                   &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n 1        1 King County Department of Metro Transit Comm…       5216912   0     \n 2        1 King County Department of Metro Transit Dema…        832327   6.05e7\n 3        1 King County Department of Metro Transit Ferr…       1715265   8.90e6\n 4        1 King County Department of Metro Transit Ligh…      29386480   0     \n 5        1 King County Department of Metro Transit Bus        56846337   6.72e8\n 6        1 King County Department of Metro Transit Stre…        588495   1.25e7\n 7        1 King County Department of Metro Transit Trol…      10123486   8.42e7\n 8        1 King County Department of Metro Transit Vanp…       5484481   8.91e6\n 9        2 Spokane Transit Authority               Dema…        531284   1.80e7\n10        2 Spokane Transit Authority               Bus         6135110   7.53e7\n# ℹ 1,163 more rows\n\nUSAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL, \n                                  FINANCIALS_mode_updated, \n                                  join_by(`NTD ID`, Mode)) |&gt;\n  drop_na()"
  },
  {
    "objectID": "mp01.html#step-4.-farebox-recovery-among-major-systems",
    "href": "mp01.html#step-4.-farebox-recovery-among-major-systems",
    "title": "Mini-Project#01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Step 4. Farebox Recovery Among Major Systems",
    "text": "Step 4. Farebox Recovery Among Major Systems\n\nWhich transit system (agency and mode) had the most UPT in 2022?\n\n\nmost_upt_2022 &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  arrange(desc(UPT)) |&gt;\n  slice(1)\nmost_upt_2022\n\n# A tibble: 1 × 9\n  `NTD ID` Agency     metro_area Mode     UPT    VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1    20008 MTA New Y… New York-… Heav… 1.79e9 3.38e8 MTA New York…    2326782567\n# ℹ 1 more variable: Expenses &lt;dbl&gt;\n\n\n\nWhich transit system (agency and mode) had the highest farebox recovery, defined as the highest ratio of Total Fares to Expenses?\n\n\nhighest_farebox_recovery &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(farebox_recovery = `Total Fares` / Expenses) |&gt;\n  arrange(desc(farebox_recovery)) |&gt;\n  slice(1)\nhighest_farebox_recovery\n\n# A tibble: 1 × 10\n  `NTD ID` Agency     metro_area Mode     UPT    VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1    20190 Port Impe… New York-… Ferr… 3.76e6 504037 Port Imperia…      33443241\n# ℹ 2 more variables: Expenses &lt;dbl&gt;, farebox_recovery &lt;dbl&gt;\n\n\n\nWhich transit system (agency and mode) has the lowest expenses per UPT?\n\n\nlower_expenses_per_upt &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(expenses_per_upt = Expenses / UPT) |&gt;\n  arrange(expenses_per_upt) |&gt;\n  slice(1)\nlower_expenses_per_upt\n\n# A tibble: 1 × 10\n  `NTD ID` Agency     metro_area Mode     UPT    VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1    40147 North Car… Raleigh, … Bus   2.31e6 531555 North Caroli…             0\n# ℹ 2 more variables: Expenses &lt;dbl&gt;, expenses_per_upt &lt;dbl&gt;\n\n\n\nWhich transit system (agency and mode) has the highest total fares per UPT?\n\n\nhighest_fares_per_upt &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(fares_per_upt = `Total Fares` / UPT) |&gt;\n  arrange(desc(fares_per_upt)) |&gt;\n  slice(1)\nhighest_fares_per_upt\n\n# A tibble: 1 × 10\n  `NTD ID` Agency     metro_area Mode     UPT    VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1    20217 Hampton J… New York-… Comm… 521577 2.04e6 Hampton Jitn…      21539188\n# ℹ 2 more variables: Expenses &lt;dbl&gt;, fares_per_upt &lt;dbl&gt;\n\n\n\nWhich transit system (agency and mode) has the lowest expenses per VRM?\n\n\nlowest_expenses_per_vrm &lt;-USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(expenses_per_vrm = Expenses / VRM) |&gt;\n  arrange(expenses_per_vrm) |&gt;\n  slice(1)\nlowest_expenses_per_vrm\n\n# A tibble: 1 × 10\n  `NTD ID` Agency     metro_area Mode     UPT    VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1    90094 Metropoli… San Franc… Vanp… 1.02e6 1.23e7 Metropolitan…       6504406\n# ℹ 2 more variables: Expenses &lt;dbl&gt;, expenses_per_vrm &lt;dbl&gt;\n\n\n\nWhich transit system (agency and mode) has the highest total fares per VRM?\n\n\nhighest_fares_per_vrm &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(fares_per_vrm = `Total Fares` / VRM) |&gt;\n  arrange(desc(fares_per_vrm)) |&gt;\n  slice(1)\nhighest_fares_per_vrm\n\n# A tibble: 1 × 10\n  `NTD ID` Agency      metro_area Mode     UPT   VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1    40040 Jacksonvil… Jacksonvi… Ferr… 416129  9084 Jacksonville…       1432549\n# ℹ 2 more variables: Expenses &lt;dbl&gt;, fares_per_vrm &lt;dbl&gt;"
  },
  {
    "objectID": "mp01.html#part-1.-data-downloading-cleaning",
    "href": "mp01.html#part-1.-data-downloading-cleaning",
    "title": "Mini-Project#01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Part 1. Data Downloading & Cleaning",
    "text": "Part 1. Data Downloading & Cleaning\nThe first step is to install the tidyverse package, as it provides useful data manipulation tools such as:\n\ndplyr for data manipulation functions (e.g.mutate(), select(), group_by())\nggplot2 for data visualization (e.g. bar charts, line charts, scatter plots)\nreadr for reading and writing data (e.g.read_csv(), write_csv())\n\n\na) Fare Revenue Data\n\nThis dataset contains information on the total fare revenues for transit agencies. All files in downloading steps are taken directly from the official website. After the FARES data is cleaned, only important columns are selected and data is filtered by the rows where Expense Type is Funds Earned During Period.\n\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\n# Let's start with Fare Revenue\nlibrary(tidyverse)\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"2022_fare_revenue.xlsx\" in your project\n    # directory.\n    download.file(\"http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\", \n                  destfile=\"2022_fare_revenue.xlsx\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n    select(-`State/Parent NTD ID`, \n           -`Reporter Type`,\n           -`Reporting Module`,\n           -`TOS`,\n           -`Passenger Paid Fares`,\n           -`Organization Paid Fares`) |&gt;\n    filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n    select(-`Expense Type`) |&gt;\n    group_by(`NTD ID`,       # Sum over different `TOS` for the same `Mode`\n             `Agency Name`,  # These are direct operated and sub-contracted \n             `Mode`) |&gt;      # of the same transit modality\n                             # Not a big effect in most munis (significant DO\n                             # tends to get rid of sub-contractors), but we'll sum\n                             # to unify different passenger experiences\n    summarize(`Total Fares` = sum(`Total Fares`)) |&gt;\n    ungroup()\n\n\n\nb) Expenses Data\n\nThis step involves getting the 2022 operating expenses data. The expenses are grouped by NTD ID, Agency, Total and Mode to calculate total operating costs for each agency and transportation mode.\n\n\nif(!file.exists(\"2022_expenses.csv\")){\n    # This should work _in theory_ but in practice it's still a bit finicky\n    # If it doesn't work for you, download this file 'by hand' in your\n    # browser and save it as \"2022_expenses.csv\" in your project\n    # directory.\n    download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\", \n                  destfile=\"2022_expenses.csv\", \n                  quiet=FALSE, \n                  method=\"wget\")\n}\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n    select(`NTD ID`, \n           `Agency`,\n           `Total`, \n           `Mode`) |&gt;\n    mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n    rename(Expenses = Total) |&gt;\n    group_by(`NTD ID`, `Mode`) |&gt;\n    summarize(Expenses = sum(Expenses)) |&gt;\n    ungroup()\n\n\n\nc) Merging Financial Data\nFINANCIALS = FARES + EXPENSES\nTo combine the fare revenue and expenses by NTD ID and Mode – the inner_join() function is used.\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\n\n\nd) Ridership Data\nIn this part, the monthly ridership data is downloaded and necessary columns are kept, especially we are interested in this data:\n\nUPT - Unlinked Passenger Trips\nVRM - Vehicle Revenue Miles\n\n\nif(!file.exists(\"ridership.xlsx\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"ridership.xlsx\" in your project\n  # directory.\n  download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\", \n                destfile=\"ridership.xlsx\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  rename(metro_area = `UZA Name`) |&gt; #task1\n  pivot_longer(-c(`NTD ID`:`3 Mode`, metro_area), \n               names_to=\"month\", \n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  rename(metro_area =`UZA Name`) |&gt; #task1\n  group_by(`NTD ID`, `Agency`, metro_area, \n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\n\n\ne) Merging Ridership Data\nThe inner_join() function is used again for TRIPS and MILES to get them together into USAGE dataset.\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\n\n\nf) Glimpse of the Main Dataset and Improving Mode column\n\nsample_n(USAGE, 1000) selects a random sample of 1000 records from the USAGE dataset;\nmutate helps to convert the month column to a character format, ensuring it’s one format for further analysis;\nDT::datatable() gives a web-like interactive table for a sampled dataset for filtering, sorting etc., ensure that DT library is installed, if not use install.packages(\"DT\") function from the previous step;\n\n\nsample_n(USAGE, 1000) |&gt; \n  mutate(month=as.character(month)) |&gt; \n  DT::datatable()\n\n\n\n\n\nNext, the mutate function is used to recode Mode column for better clarity for transportation systems. And, case_when() function replace abbreviations\nAR -&gt; Alaska Railroad etc. The distinct function checks correct transformation for unique modes.\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode=case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\", \n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"SR\" ~ \"Streercar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    TRUE ~ \"Unknown\"\n))\ndistinct(USAGE, Mode)\n\n# A tibble: 18 × 1\n   Mode                       \n   &lt;chr&gt;                      \n 1 Demand Response            \n 2 Ferryboat                  \n 3 Bus                        \n 4 Streercar Rail             \n 5 Trolleybus                 \n 6 Vanpool                    \n 7 Commuter Bus               \n 8 Bus Rapid Transit          \n 9 Light Rail                 \n10 Hybrid Rail                \n11 Monorail/Automated Guideway\n12 Commuter Rail              \n13 Alaska Railroad            \n14 Aerial Tramway             \n15 Heavy Rail                 \n16 Inclined Plane             \n17 Publico                    \n18 Cable Car"
  },
  {
    "objectID": "mp01.html#part-2.-data-analysis",
    "href": "mp01.html#part-2.-data-analysis",
    "title": "Mini-Project#01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Part 2. Data Analysis",
    "text": "Part 2. Data Analysis\n\nQuestion 1. What transit agency had the most total VRM in our data set?\nTo get this answer, the total vehicle miles traveled by agency are aggregated (ensure to remove empty rows, and get only one agency with the highest VRM):\n\nmost_vrm_agency &lt;- USAGE |&gt;\n  group_by(Agency) |&gt;\n  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_VRM)) |&gt;\n  slice(1) #top result\nmost_vrm_agency\n\n# A tibble: 1 × 2\n  Agency                      total_VRM\n  &lt;chr&gt;                           &lt;dbl&gt;\n1 MTA New York City Transit 10832855350\n\n\n\n\nQuestion 2. What transit mode had the most total VRM in our data set?\nThis question is pretty simple. We need to update the code above to a ‘Mode’ instead of ‘Agency’\n\nmost_vrm_mode &lt;- USAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  arrange(desc(total_VRM)) |&gt;\n  slice(1) #top result\nmost_vrm_mode\n\n# A tibble: 1 × 2\n  Mode    total_VRM\n  &lt;chr&gt;       &lt;dbl&gt;\n1 Bus   49444494088\n\n\n\n\nQuestion 3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\nThe code below calculates MTA NYC Transit trips taken by Heavy Rail mode for the month of May 2024. The summarize() function is used to create a new variable total_trips, sum sums the values in the UPT column and na.rm ignores missing values.\n\nnyc_subway_may2024 &lt;- USAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\", Mode == \"Heavy Rail\", month == \"2024-05-01\") |&gt;\n  summarize(total_trips = sum(UPT, na.rm = TRUE))\nnyc_subway_may2024\n\n# A tibble: 1 × 1\n  total_trips\n        &lt;dbl&gt;\n1   180458819\n\n\n\n\nQuestion 4. How much did NYC subway ridership fall between April 2019 and April 2020?\nThe code filters only “MTA New York City Transit” for the dates mentioned, then sums the UPT for each month. After that, the percentage drop in ridership is calculated to reflect the impact of the COVID-19 on public transportation usage during the pandemic.\n\nnyc_subway_april_ridership &lt;- USAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\", \n         Mode == \"Heavy Rail\", \n         month %in% c(\"2019-04-01\", \"2020-04-01\")) |&gt;\n  group_by(month) |&gt;\n  summarize(total_trips = sum(UPT, na.rm = TRUE)) #ridership fall\n\nridership_fall &lt;- nyc_subway_april_ridership |&gt; # % fall \n  summarize(fall = 100* (total_trips[month == \"2020-04-01\"] - total_trips[month == \"2019-04-01\"]) / total_trips[month == \"2019-04-01\"])\nridership_fall\n\n# A tibble: 1 × 1\n   fall\n  &lt;dbl&gt;\n1 -91.3"
  },
  {
    "objectID": "mp01.html#part-3.-table-summarization",
    "href": "mp01.html#part-3.-table-summarization",
    "title": "Mini-Project#01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Part 3. Table Summarization",
    "text": "Part 3. Table Summarization\nThis code is responsible for creating an annual summary of public transit usage and financial data for 2022 - USAGE_2022_ANNUAL, steps\n1) Filtering and summarizing transit data for 2022.\n2) Updating Financial data mode labels.\n3) Join the USAGE_AND_FINANCIALS and making sure that modes aren’t abbreviated.\n\n#Task 5 table summarization\nlibrary(dplyr)\nlibrary(lubridate) #year function\n\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  filter(year(month) == 2022) |&gt;\n  group_by(`NTD ID`, Agency, metro_area, Mode) |&gt;\n  summarize(\n    UPT = sum(UPT, na.rm = TRUE),\n    VRM = sum(VRM, na.rm = TRUE),\n    .groups = \"drop\"\n  )\nUSAGE_2022_ANNUAL\n\n# A tibble: 1,141 × 6\n   `NTD ID` Agency                                metro_area Mode     UPT    VRM\n      &lt;int&gt; &lt;chr&gt;                                 &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1        1 King County                           Seattle--… Bus   5.40e7 6.16e7\n 2        1 King County                           Seattle--… Dema… 6.63e5 1.29e7\n 3        1 King County                           Seattle--… Ferr… 4.00e5 5.12e4\n 4        1 King County                           Seattle--… Stre… 1.12e6 1.80e5\n 5        1 King County                           Seattle--… Trol… 9.58e6 2.64e6\n 6        1 King County                           Seattle--… Vanp… 7.03e5 4.41e6\n 7        2 Spokane Transit Authority             Spokane, … Bus   6.60e6 6.49e6\n 8        2 Spokane Transit Authority             Spokane, … Dema… 3.10e5 4.04e6\n 9        2 Spokane Transit Authority             Spokane, … Vanp… 9.06e4 9.06e5\n10        3 Pierce County Transportation Benefit… Seattle--… Bus   4.95e6 4.23e6\n# ℹ 1,131 more rows\n\nFINANCIALS_mode_updated &lt;- FINANCIALS %&gt;%\n  mutate(Mode =case_when(\n    Mode == \"AR\" ~ \"Alaska Railroad\", \n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"SR\" ~ \"Streercar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    TRUE ~ \"Unknown\"\n  ))\nFINANCIALS_mode_updated\n\n# A tibble: 1,173 × 5\n   `NTD ID` `Agency Name`                           Mode  `Total Fares` Expenses\n      &lt;dbl&gt; &lt;chr&gt;                                   &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n 1        1 King County Department of Metro Transit Comm…       5216912   0     \n 2        1 King County Department of Metro Transit Dema…        832327   6.05e7\n 3        1 King County Department of Metro Transit Ferr…       1715265   8.90e6\n 4        1 King County Department of Metro Transit Ligh…      29386480   0     \n 5        1 King County Department of Metro Transit Bus        56846337   6.72e8\n 6        1 King County Department of Metro Transit Stre…        588495   1.25e7\n 7        1 King County Department of Metro Transit Trol…      10123486   8.42e7\n 8        1 King County Department of Metro Transit Vanp…       5484481   8.91e6\n 9        2 Spokane Transit Authority               Dema…        531284   1.80e7\n10        2 Spokane Transit Authority               Bus         6135110   7.53e7\n# ℹ 1,163 more rows\n\nUSAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL, \n                                  FINANCIALS_mode_updated, \n                                  join_by(`NTD ID`, Mode)) |&gt;\n  drop_na()"
  },
  {
    "objectID": "mp01.html#part-4.-farebox-recovery-among-major-systems",
    "href": "mp01.html#part-4.-farebox-recovery-among-major-systems",
    "title": "Mini-Project#01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Part 4. Farebox Recovery Among Major Systems",
    "text": "Part 4. Farebox Recovery Among Major Systems\n\n1. Which transit system (agency and mode) had the most UPT in 2022?\nThe metric of Unlinked Passengers Trips or UPT provides insight into how many time passengers boarded a transit vehicle. The high UPT equals to more frequent trips. To filter the busiest system, we set 400,000 UPT at least in 2022 and sorted by the highest total.\n\nmost_upt_2022 &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  arrange(desc(UPT)) |&gt;\n  slice(1)\nmost_upt_2022\n\n# A tibble: 1 × 9\n  `NTD ID` Agency     metro_area Mode     UPT    VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1    20008 MTA New Y… New York-… Heav… 1.79e9 3.38e8 MTA New York…    2326782567\n# ℹ 1 more variable: Expenses &lt;dbl&gt;\n\n\nResult: It’s no surprise that MTA New York City Transit - Heavy Rail leads with 1.79 billion UPT. The immense number of people rely on it every day, both New Yorkers and tourists.\n\n\n2. Which transit system (agency and mode) had the highest farebox recovery, defined as the highest ratio of Total Fares to Expenses?\nThe farebox recovery ratio measures the percentage of operating expenses covered by fare revenue. In this research we will take only a glimpse how financially self-sustaining a transit system is.\n\nhighest_farebox_recovery &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(farebox_recovery = `Total Fares` / Expenses) |&gt;\n  arrange(desc(farebox_recovery)) |&gt;\n  slice(1)\nhighest_farebox_recovery\n\n# A tibble: 1 × 10\n  `NTD ID` Agency     metro_area Mode     UPT    VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1    20190 Port Impe… New York-… Ferr… 3.76e6 504037 Port Imperia…      33443241\n# ℹ 2 more variables: Expenses &lt;dbl&gt;, farebox_recovery &lt;dbl&gt;\n\n\nResult: Port Imperial Ferry (New York-New Jersey area) is on the top of the chart with 66.3% farebox recovery ratio. This higher ratio means that it’s less reliant on subsidies from local or federal governments.\n\n\n3. Which transit system (agency and mode) has the lowest expenses per UPT?\nWith Expenses per UPT we measure how much it costs to transport a single pasenger for a trip. Lower expenses per trip indicate better services at reduced cost.\n\nlower_expenses_per_upt &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(expenses_per_upt = Expenses / UPT) |&gt;\n  arrange(expenses_per_upt) |&gt;\n  slice(1)\nlower_expenses_per_upt\n\n# A tibble: 1 × 10\n  `NTD ID` Agency     metro_area Mode     UPT    VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1    40147 North Car… Raleigh, … Bus   2.31e6 531555 North Caroli…             0\n# ℹ 2 more variables: Expenses &lt;dbl&gt;, expenses_per_upt &lt;dbl&gt;\n\n\nResult: The North Carolina Department of Transportation’s Bus system in Raleigh leads this chart with the lowest expenses per trip.\n\n\n4. Which transit system (agency and mode) has the highest total fares per UPT?\nTotal fares per UPT provide an indicator how much revenue the system is generating from each passenger trip. Higher fares can be due to the distances or premium services.\n\nhighest_fares_per_upt &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(fares_per_upt = `Total Fares` / UPT) |&gt;\n  arrange(desc(fares_per_upt)) |&gt;\n  slice(1)\nhighest_fares_per_upt\n\n# A tibble: 1 × 10\n  `NTD ID` Agency     metro_area Mode     UPT    VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1    20217 Hampton J… New York-… Comm… 521577 2.04e6 Hampton Jitn…      21539188\n# ℹ 2 more variables: Expenses &lt;dbl&gt;, fares_per_upt &lt;dbl&gt;\n\n\nResult: Hampton Jitney(Commuter Bus) in the New York City are had the highest total $41.29 per UPT and is the combination of long-distance and premium services for people who want to spend the vacation in Hamptons.\n\n\n5. Which transit system (agency and mode) has the lowest expenses per VRM?\n\nlowest_expenses_per_vrm &lt;-USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(expenses_per_vrm = Expenses / VRM) |&gt;\n  arrange(expenses_per_vrm) |&gt;\n  slice(1)\nlowest_expenses_per_vrm\n\n# A tibble: 1 × 10\n  `NTD ID` Agency     metro_area Mode     UPT    VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1    90094 Metropoli… San Franc… Vanp… 1.02e6 1.23e7 Metropolitan…       6504406\n# ℹ 2 more variables: Expenses &lt;dbl&gt;, expenses_per_vrm &lt;dbl&gt;\n\n\n\n\n6. Which transit system (agency and mode) has the highest total fares per VRM?\nNow we are interested how much revenue is being generated for each mile traveled and the higher fare revenue is the more expensive/premium services are or efficient fare collection.\n\nhighest_fares_per_vrm &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT &gt;= 400000) |&gt;\n  mutate(fares_per_vrm = `Total Fares` / VRM) |&gt;\n  arrange(desc(fares_per_vrm)) |&gt;\n  slice(1)\nhighest_fares_per_vrm\n\n# A tibble: 1 × 10\n  `NTD ID` Agency      metro_area Mode     UPT   VRM `Agency Name` `Total Fares`\n     &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;\n1    40040 Jacksonvil… Jacksonvi… Ferr… 416129  9084 Jacksonville…       1432549\n# ℹ 2 more variables: Expenses &lt;dbl&gt;, fares_per_vrm &lt;dbl&gt;\n\n\nResult: Jacksonville Transportation Authority’s Ferry service generates $157.71 per VTM. Meaning, ferry service in that location, has significantly higher fares compared to bus or rail, due to specific travel needs.\n\n\nThis mini-project provides valuable insights into the operational, financial efficiency and sustainability of various U.S. transit systems; and gives a great glimpse into the data how well certain transit agencies manage the cost efficiency and revenue generation from fares."
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "Mini-Project #02: The Business of Show Business",
    "section": "",
    "text": "In this project, we will analyze the Hollywood history and get data-driven ideas for a “new movie” by defining best genres, actors, directors of a decade, all the time and assign special weighted score that will help us to identify the secret of a successful sauce to make the catchy and appealing movie for the nowadays audience. Let’s begin!\nThe key data source that will be used is the Internet Movie Database (IMDb) for non-commercial use."
  },
  {
    "objectID": "mp02.html#before-we-start",
    "href": "mp02.html#before-we-start",
    "title": "Mini-Project #02: The Business of Show Business",
    "section": "Before we start:",
    "text": "Before we start:\nThe first step before you start doing anything on your project is to make sure that you have all your packages installed. However, don’t be worried if you miss any, you can add them anywhere in the code, but for readability and clean code writing you should build that habit of importing everything when you start. While we are familiar already with the most of the packages I will add only two comments for new ones. Note: The code will be collapsed for better navigation.\n\n\nImport Libraries\nlibrary(readr)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(tidyr)\nlibrary(knitr) #improves readability of outputs\nlibrary(kableExtra) #addition to knitr, styling tables in R Markdown documents \n#install.packages(\"kableExtra\") #if it didn't import, do install command"
  }
]